name: 🚴 Stolen Bike Finder - CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  ECR_REGISTRY: public.ecr.aws/u7w7e7d5

jobs:
  # ========================================
  # 🏗️ BUILD JOB
  # ========================================
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ github.sha }}
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📦 Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
      
    - name: 🔧 Create data directory
      run: |
        cd mvp
        mkdir -p data
        chmod 755 data
        
    - name: 🏗️ Build Docker images
      run: |
        cd mvp
        echo "🔨 Building Docker Compose services..."
        docker-compose build --no-cache --parallel
        
    - name: 🏷️ Tag images for ECR
      run: |
        echo "🏷️ Tagging images for ECR..."
        # Tag scraper service
        docker tag mvp_scraper-service:latest $ECR_REGISTRY/stolen-bike-scraper:latest
        docker tag mvp_scraper-service:latest $ECR_REGISTRY/stolen-bike-scraper:${{ github.sha }}
        
        # Tag storage service  
        docker tag mvp_storage-service:latest $ECR_REGISTRY/stolen-bike-storage:latest
        docker tag mvp_storage-service:latest $ECR_REGISTRY/stolen-bike-storage:${{ github.sha }}
        
    - name: 📦 List built images
      run: |
        echo "📋 Docker images created:"
        docker images | grep -E "(mvp|stolen-bike)" || docker images | head -10
        
    - name: 💾 Save Docker images
      run: |
        echo "💾 Saving Docker images for testing..."
        docker save mvp_scraper-service:latest mvp_storage-service:latest | gzip > docker-images.tar.gz
        
    - name: ⬆️ Upload images artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: docker-images.tar.gz
        retention-days: 1

  # ========================================
  # 🧪 TEST JOB
  # ========================================
  test:
    name: 🧪 Test Services
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose jq
      
    - name: ⬇️ Download images artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        
    - name: 📂 Load Docker images
      run: |
        echo "📂 Loading Docker images..."
        gunzip -c docker-images.tar.gz | docker load
        
    - name: � Create data directory
      run: |
        cd mvp
        mkdir -p data
        chmod 755 data
        
    - name: �🚀 Start services
      run: |
        cd mvp
        echo "🚀 Starting services in background..."
        docker-compose up -d
        
    - name: ⏳ Wait for services startup
      run: |
        cd mvp
        echo "⏳ Waiting for services to initialize..."
        sleep 30
        
        echo "📊 Container status:"
        docker-compose ps
        
    - name: 🔍 Health checks
      run: |
        echo "🔍 Running health checks..."
        
        # Function to test service health with retries
        test_health() {
          local service_name=$1
          local port=$2
          local max_attempts=5
          
          for i in $(seq 1 $max_attempts); do
            echo "Testing $service_name (attempt $i/$max_attempts)..."
            if curl -f http://localhost:$port/health; then
              echo "✅ $service_name is healthy"
              return 0
            else
              echo "⏳ $service_name not ready, waiting..."
              sleep 10
            fi
          done
          
          echo "❌ $service_name health check failed"
          docker-compose logs $service_name
          return 1
        }
        
        # Test both services
        test_health "Storage Service" 8002
        test_health "Scraper Service" 8001
        
    - name: 🧪 API endpoint tests
      run: |
        echo "🧪 Testing API endpoints..."
        
        # Test Storage Service
        echo "📦 Storage Service API tests:"
        curl -s http://localhost:8002/health | jq '.' || echo "Health endpoint OK"
        curl -s http://localhost:8002/results | jq '.' || echo "Results endpoint OK"
        
        # Test Scraper Service  
        echo "🔍 Scraper Service API tests:"
        curl -s http://localhost:8001/health | jq '.' || echo "Health endpoint OK"
        curl -s http://localhost:8001/ | jq '.' || echo "Root endpoint OK"
        
    - name: 📊 Service monitoring
      run: |
        cd mvp
        echo "📊 Service status and performance:"
        
        echo "=== CONTAINER STATUS ==="
        docker-compose ps
        
        echo "=== RESOURCE USAGE ==="
        docker stats --no-stream
        
        echo "=== SCRAPER SERVICE LOGS (Last 30 lines) ==="
        docker-compose logs --tail=30 scraper-service
        
        echo "=== STORAGE SERVICE LOGS (Last 30 lines) ==="
        docker-compose logs --tail=30 storage-service
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        cd mvp
        echo "🧹 Cleaning up test resources..."
        docker-compose down -v

  # ========================================
  # 🚀 DEPLOY JOB
  # ========================================
  deploy:
    name: 🚀 Deploy to ECR
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🏷️ Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
      
    - name: ⬇️ Download images artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        
    - name: 📂 Load Docker images
      run: |
        echo "� Loading Docker images..."
        gunzip -c docker-images.tar.gz | docker load
        
    - name: 🏷️ Re-tag images for ECR
      run: |
        echo "🏷️ Re-tagging images for ECR..."
        # Tag scraper service
        docker tag mvp_scraper-service:latest $ECR_REGISTRY/stolen-bike-scraper:latest
        docker tag mvp_scraper-service:latest $ECR_REGISTRY/stolen-bike-scraper:${{ github.sha }}
        
        # Tag storage service  
        docker tag mvp_storage-service:latest $ECR_REGISTRY/stolen-bike-storage:latest
        docker tag mvp_storage-service:latest $ECR_REGISTRY/stolen-bike-storage:${{ github.sha }}
        
    - name: �🚀 Push images to ECR
      run: |
        echo "🚀 Pushing images to Amazon ECR..."
        
        echo "📦 Pushing scraper service..."
        docker push $ECR_REGISTRY/stolen-bike-scraper:latest
        docker push $ECR_REGISTRY/stolen-bike-scraper:${{ github.sha }}
        
        echo "📦 Pushing storage service..."
        docker push $ECR_REGISTRY/stolen-bike-storage:latest
        docker push $ECR_REGISTRY/stolen-bike-storage:${{ github.sha }}
        
        echo "✅ All images pushed successfully!"
        echo "🏷️ Images available at:"
        echo "   - $ECR_REGISTRY/stolen-bike-scraper:latest"
        echo "   - $ECR_REGISTRY/stolen-bike-scraper:${{ github.sha }}"
        echo "   - $ECR_REGISTRY/stolen-bike-storage:latest"
        echo "   - $ECR_REGISTRY/stolen-bike-storage:${{ github.sha }}"

  # ========================================
  # 📈 SUMMARY JOB
  # ========================================
  summary:
    name: 📈 Build Summary
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()
    
    steps:
    - name: 📈 Workflow summary
      run: |
        echo "📈 WORKFLOW SUMMARY"
        echo "==================="
        echo "🗓️  Date: $(date)"
        echo "🌿  Branch: ${{ github.ref_name }}"
        echo "💾  Commit: ${{ github.sha }}"
        echo "👤  Actor: ${{ github.actor }}"
        echo "🔄  Event: ${{ github.event_name }}"
        echo ""
        echo "🏗️  Build: ${{ needs.build.result }}"
        echo "🧪  Test: ${{ needs.test.result }}"
        echo "🚀  Deploy: ${{ needs.deploy.result }}"
        echo ""
        
        if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ CI Pipeline: SUCCESS"
          echo "🎉 All tests passed!"
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "🚀 Deployment: SUCCESS"
            echo "📦 Images pushed to ECR!"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "⏭️  Deployment: SKIPPED (not master branch or not push event)"
          fi
        else
          echo "❌ CI Pipeline: FAILED"
          echo "🔍 Check job logs above for details"
        fi
